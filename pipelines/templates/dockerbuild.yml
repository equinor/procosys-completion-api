parameters:
  deploymentName: ''
  dependsOn: ''
  condition: ''
  buildCommand: ''
  versionNumber: ''
  dockerfilePath: ''
  buildContext: ''
  repository: ''
  envGroup: ''
  dockerRegistryServiceConnection: ''
  arguments: ''
  tag: ''

jobs:
  - deployment: '${{ parameters.deploymentName }}'
    dependsOn: '${{ parameters.dependsOn }}'
    condition: ${{ parameters.condition }}
    pool: 
      vmImage: 'ubuntu-latest'
    environment: '${{ parameters.envGroup }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk'
            inputs:
              version: 8.x

          - task: Docker@2
            displayName: 'ACR Login'
            inputs:
              command: login
              containerRegistry: '${{ parameters.dockerRegistryServiceConnection }}'

          - task: NuGetAuthenticate@0
            displayName: 'NuGet Authenticate'
            inputs:
              forceReinstallCredentialProvider: true

          - task: Docker@2
            displayName: Build
            condition: contains('${{ parameters.buildCommand }}', 'build')
            inputs:
              command: build
              repository: '${{ parameters.repository }}'
              dockerfile: '${{ parameters.dockerfilePath }}'
              buildContext: '${{ parameters.buildContext }}'
              tags: |
                ${{ parameters.versionNumber }}$(Build.BuildId)
                latest
              arguments: '${{ parameters.arguments }}'

          - task: Docker@2
            condition: and(succeeded(), contains('${{ parameters.buildCommand }}', 'Push'))
            displayName: Push
            inputs:
              command: push
              repository: '${{ parameters.repository }}'
              tags: |
                ${{ parameters.versionNumber }}$(Build.BuildId)
                latest

          - task: Docker@2
            displayName: ACR Logout
            inputs:
              command: logout
              containerRegistry: '${{ parameters.dockerRegistryServiceConnection }}'
              