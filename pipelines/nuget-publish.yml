trigger:
  branches:
    include:
      - nugetPush

variables:
  System.Debug: 'true'
  vmImageName: 'windows-latest'
  buildConfiguration: 'Release'

stages:
  - stage: "Build"
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/nugetPush')
    jobs:
      - job:
        workspace:
          clean: all
        pool:
          vmImage: $(vmImageName)
        
        steps:
          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: restore
              projects: '**/*.csproj'
              arguments: '--configfile $(Build.SourcesDirectory)../nuget.config'

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: build
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet test $(buildConfiguration)'
            inputs:
              command: test
              projects: '**/*[Tt]ests/*.csproj'
              arguments: '--configuration $(buildConfiguration)'

  - stage: "PublishAndPack"
    displayName: 'Publish and Pack'
    dependsOn: 'Build'
    condition: |
      and
      (
        succeeded(),
        eq(variables['Build.SourceBranch'], 'refs/heads/nugetPush')
       )
    jobs:
      - job: PackAndPublish
        pool:
          vmImage: $(vmImageName)
        steps:
          - checkout: self

          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: restore
              projects: '**/*.csproj'

          - task: PowerShell@2
            name: getVersion # Name of the pipeline variable used as prefix in referenace. Example $(getVersion.packageVersion)
            displayName: 'get version from Equinor.ProCoSys.Completion.MessageContracts.csproj'
            inputs:
              targetType: inline
              pwsh: true
              script: |
                # Set powershell variables
                $path = "src/Equinor.ProCoSys.PcsBus/Equinor.ProCoSys.PcsServiceBus.csproj"
                $xPath = "/Project/PropertyGroup"
                $element = "VersionPrefix"
                $variableName = "packageVersion" # Name of the pipeline variable used as suffix in referenace. Example $(getVersion.packageVersion)
                
                # Get version from XML file
                # Check if file contains data
                $i = Get-Content $path
                if (!$i) {Write-Host "invalid filepath or file is empty"}
                else {Write-Host "File validated OK"}
                
                $xmlData = [xml](Get-Content $path) # Get content from xml file
                
                $version = ($xmlData.ChildNodes.SelectNodes("$xPath") | Select-Object $element).$element
                if (!$version) {Write-Host "Could not read xml value"} # Validates if value can be read from xml
                
                # Set variable
                "##vso[task.setvariable variable=$variableName;isOutput=true]$($version)"
                Write-Host "Setting variable named $variableName with value $($version)" # Use as prefix in variale referenace

          - task: DotNetCoreCLI@2
            displayName: 'NuGet pack'
            inputs:
              command: pack
              packagesToPack: 'src/Equinor.ProCoSys.Completion.MessageContracts/Equinor.ProCoSys.Completion.MessageContracts.csproj'
              packDestination: '$(Build.ArtifactStagingDirectory)\packages\releases'
              includeReferencedProjects: true
              version: $(getVersion.packageVersion)

          - publish: '$(Build.ArtifactStagingDirectory)'
            artifact: 'packages'

          - task: NuGetAuthenticate@0
            displayName: 'NuGet Authenticate'

          - task: DotNetCoreCLI@2
            displayName: 'NuGet push release'
            inputs:
              command: push
              feedsToUse: 'select'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
              publishVstsFeed: 'ProCoSysOfficial'
              allowPackageConflicts: true
              arguments: '--configfile $(Build.SourcesDirectory)../nuget.config'