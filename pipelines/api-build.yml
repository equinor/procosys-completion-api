trigger:
  branches:
    include:
      - main

resources:
  repositories:
  - repository: self

# Global variables for the pipeline
variables:
 - template: completion-variables.yml

name: '${{ variables.versionNumber }}$(Build.BuildId)-$(Date:MMddyyyy)'

stages:
# Run tests Stage
# - stage: runtests
#   displayName: 'Run tests'

#   jobs:
#   - template: templates/runtest.yml
#     parameters:
#       deployment: 'runtests'
#       environment: '$(globalPrefix)-$(fullAppName)-api-runtests'
#       testPath: '$(Build.SourcesDirectory)/src/Equinor.Procosys.Completion.sln'

# Build stage. Docker build, tag and push
- stage: build
  displayName: 'Build'
#  dependsOn: 'runtests'
  dependsOn: ''
  variables:
    environment: '$(globalPrefix)-$(fullAppName)-api-build'
    arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'
    dockerfilePath: '$(Build.SourcesDirectory)/src/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)/src'
    repository: '${{ variables.repositoryName }}'

  jobs:
  # Docker Build
  - template: templates/dockerbuild.yml
    parameters:
      deployment: 'docker_build'
      condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
      environment: ${{ variables.environment }}
      #buildCommand: build
      buildCommand: buildAndPush
      versionNumber: ${{ variables.versionNumber }}
      arguments: ${{ variables.arguments }}
      dockerfilePath: ${{ variables.dockerfilePath }}
      buildContext: ${{ variables.buildContext }}
      repository: ${{ variables.repository }}
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Docker Build (Main Only)
  - template: templates/dockerbuild.yml
    parameters:
      deployment: 'docker_build_and_push_main_only'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')) 
      environment: ${{ variables.environment }}
      buildCommand: buildAndPush
      versionNumber: ${{ variables.versionNumber }}
      arguments: ${{ variables.arguments }}
      dockerfilePath: ${{ variables.dockerfilePath }}
      buildContext: ${{ variables.buildContext }}
      repository: ${{ variables.repository }}
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Create Migration Script
  - template: templates/createsqlmigrate.yml
    parameters:
      deploymentName: 'create_migration_script'
      environment: '${{ variables.environment }}'
      serviceConnection: '${{ variables.nonProdServiceConnection }}'

  # Dev deploy stage
- stage: DeployDev
  displayName: 'Deploy to dev'
  dependsOn: 'build' 
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')) 
  variables:
    envName: 'dev'

  jobs:
    - deployment: Deploy
      displayName: Migrate DB & deploy
      environment: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
               # Run Migration Script (Predeploy)
              - template: templates/execute-db-migration.yml
                parameters:
                  serviceConnection: '${{ variables.nonProdServiceConnection }}'
                  kvName: '${{ variables.commonKvName }}'
                  kvRgName: '${{ variables.commonRgName }}'
                  sqlAdminPasswordKvKey: '${{ variables.sqlAdminPasswordKvKey }}'
                  sqlAdminUserName: '${{ variables.sqlAdminUserName }}'
                  serverName: '${{ variables.sqlServerName }}.database.windows.net'
                  databaseName: '${{ variables.databaseName }}'      

              # Deploy to Radix
              - template: templates/radix-deploy.yml
                parameters:
                  radixResource: '${{ variables.radixResource }}'
                  radixApplication: '${{ variables.radixApplication }}'
                  radixUrl: '${{ variables.radixUrl }}'
                  serviceConnection: '${{ variables.nonProdServiceConnection }}'
                  imageTagNameBackend: '${{ variables.versionNumber }}$(Build.BuildId)'
                  #imageTagNameLeaderElector: ${{ variables.leaderElectorDockerImageTagName }}

# Test deploy stage
- stage: DeployTest
  displayName: 'Deploy to test'
  dependsOn: 'DeployDev'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')) 
  variables:
    envName: 'test'
    fromEnv: 'dev'
    # radixJobName must have been set by previous step
    radixJobName: $[ stageDependencies.DeployDev.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ]

  jobs:
    - deployment: Deploy
      displayName: Migrate DB & promote
      environment: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Run Migration Script (Predeploy)
              - template: templates/execute-db-migration.yml
                parameters:
                  serviceConnection: '${{ variables.nonProdServiceConnection }}'
                  kvName: '${{ variables.commonKvName }}'
                  kvRgName: '${{ variables.commonRgName }}'
                  sqlAdminPasswordKvKey: '${{ variables.sqlAdminPasswordKvKey }}'
                  sqlAdminUserName: '${{ variables.sqlAdminUserName }}'
                  serverName: '${{ variables.sqlServerName }}.database.windows.net'
                  databaseName: '${{ variables.databaseName }}'      

              # Promote to test
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(fromEnv)
                  toEnvironment: $(envName)
                  radixResource: '${{ variables.radixResource }}'
                  radixApplication: '${{ variables.radixApplication }}'
                  radixUrl: '${{ variables.radixUrl }}'
                  serviceConnection: '${{ variables.nonProdServiceConnection }}'
                  deploymentName: $(radixJobName)

# Prod deploy stage
- stage: DeployProd
  displayName: 'Deploy to prod'
  dependsOn: 'DeployTest'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')) 
  variables:
    envName: 'prod'
    fromEnv: 'test'
    # This variable must have been set by previous step
    radixJobName: $[ stageDependencies.DeployTest.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ] 

  jobs:
    - deployment: Deploy
      displayName: Migrate DB & promote
      environment: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Run Migration Script (Predeploy)
              - template: templates/execute-db-migration.yml
                parameters:
                  serviceConnection: '${{ variables.prodServiceConnection }}'
                  kvName: '${{ variables.commonKvName }}'
                  kvRgName: '${{ variables.commonRgName }}'
                  sqlAdminPasswordKvKey: '${{ variables.sqlAdminPasswordKvKey }}'
                  sqlAdminUserName: '${{ variables.sqlAdminUserName }}'
                  serverName: '${{ variables.sqlServerName }}.database.windows.net'
                  databaseName: '${{ variables.databaseName }}'      

              # Promote to prod
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(fromEnv)
                  toEnvironment: $(envName)
                  radixResource: '${{ variables.radixResource }}'
                  radixApplication: '${{ variables.radixApplication }}'
                  radixUrl: '${{ variables.radixUrl }}'
                  serviceConnection: '${{ variables.nonProdServiceConnection }}'
                  deploymentName: $(radixJobName)
