trigger:
  branches:
    include:
      - main

resources:
  repositories:
  - repository: self

# Global variables for the pipeline
variables:
 - template: completion-variables.yml

 - name: 'repositoryName'
   value: 'completion/api'

 - name: 'versionNumber'
   value: '1.000.0.'

 - name: NUGET.PLUGIN.HANDSHAKE.TIMEOUT.IN.SECONDS
   value: 40
  
 - name: NUGET.PLUGIN.REQUEST.TIMEOUT.IN.SECONDS
   value: 40

name: '${{ variables.versionNumber }}$(Build.BuildId)-$(Date:MMddyyyy)'

stages:
# Run tests Stage
# - stage: runtests
#   displayName: 'Run tests'

#   jobs:
#   - template: templates/runtest.yml
#     parameters:
#       deployment: 'runtests'
#       environment: '$(globalPrefix)-$(fullAppName)-api-runtests'
#       testPath: '$(Build.SourcesDirectory)/src/Equinor.Procosys.Completion.sln'

# Build stage. Docker build, tag and push
- stage: build
  displayName: 'Build'
#  dependsOn: 'runtests'
  dependsOn: ''
  variables:
    environment: '$(globalPrefix)-$(fullAppName)-api-build'
    arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'
    dockerfilePath: '$(Build.SourcesDirectory)/src/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)/src'
    repository: '${{ variables.repositoryName }}'

  jobs:
  # Docker Build
  - template: templates/dockerbuild.yml
    parameters:
      deployment: 'docker_build'
      condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
      environment: ${{ variables.environment }}
      buildCommand: build
      versionNumber: ${{ variables.versionNumber }}
      arguments: ${{ variables.arguments }}
      dockerfilePath: ${{ variables.dockerfilePath }}
      buildContext: ${{ variables.buildContext }}
      repository: ${{ variables.repository }}
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Docker Build (Main Only)
  - template: templates/dockerbuild.yml
    parameters:
      deployment: 'docker_build_and_push_main_only'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/pbi/main')) 
      environment: ${{ variables.environment }}
      buildCommand: buildAndPush
      versionNumber: ${{ variables.versionNumber }}
      arguments: ${{ variables.arguments }}
      dockerfilePath: ${{ variables.dockerfilePath }}
      buildContext: ${{ variables.buildContext }}
      repository: ${{ variables.repository }}
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Create Migration Script
  - template: templates/createsqlmigrate.yml
    parameters:
      dependsOn: ''
      deploymentName: 'create_migration_script'
      environment: '${{ variables.environment }}'
      serviceConnection: '${{ variables.nonProdServiceConnection }}'

  # Dev deploy stage
- stage: DeployDev
  displayName: 'Deploy to dev'
  dependsOn: 'build' 
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')) 
  variables:
    envName: 'dev'
    
  jobs:
    - deployment: Deploy
      displayName: Migrate DB & deploy
      environment: '$(globalPrefix)-$(fullAppName)-api-$(envName)'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
               # Run Migration Script (Predeploy)
              - template: templates/execute-db-migration.yml
                parameters:
                  serviceConnection: '${{ variables.nonProdServiceConnection }}'
                  kvName: '${{ variables.commonKvName }}'
                  kvRgName: '${{ variables.commonRgName }}'
                  sqlAdminPasswordKvKey: '${{ variables.sqlAdminPasswordKvKey }}'
                  sqlAdminUserName: '${{ variables.sqlAdminUserName }}'
                  serverName: '${{ variables.sqlServerName }}.database.windows.net'
                  databaseName: '${{ variables.databaseName }}'      

              # Deploy to Radix
              - template: templates/radix-deploy.yml
                parameters:
                  imageTagNameBackend: '${{ variables.versionNumber }}$(Build.BuildId)'
                  imageTagNameLeaderElector: ${{ variables.leaderElectorDockerImageTagName }}

# Test deploy stage
#- stage: DeployTest
#  displayName: 'Deploy to test'
#  dependsOn: 'DeployDev'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')) 
#  variables:
#    envName: 'test'
#    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.env }}'
#    serviceConnection: '${{ variables.nonProdServiceConnection }}'
#    radixPromoteFromEnv: 'dev'
#    radixJobName: $[ stageDependencies.DeployDev.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ] # This variable must have been set by previous step

#  jobs:
#    - deployment: Deploy
#      displayName: Migrate DB & promote
#      environment: '${{ variables.envGroupName }}'
#      pool:
#        vmImage: 'windows-latest'
#      strategy:
#        runOnce:
#          deploy:
#            steps:
#              # Run Migration Script (Predeploy)
#              - template: templates/execute-db-migration.yml
#                parameters:
#                  dependsOn: ''      
#                  deploymentName: 'run_migration_script'
#                  envGroup: '${{ variables.envGroupName }}'
#                  serviceConnection: '${{ variables.serviceConnection }}'
#                  kvName: '${{ variables.commonKvName }}'
#                  kvRgName: '${{ variables.commonRgName }}'
#                  kvSecret: '${{ variables.sqlAdminUserName }}-${{ variables.envName }}'
#                  serverName: '${{ variables.sqlServerName }}.database.windows.net'
#                  databaseName: '${{ variables.databaseName }}'      
#              # Promote to test
#              - template: templates/radix-promote-env.yml
#                parameters:
#                  fromEnvironment: $(radixPromoteFromEnv)
#                  toEnvironment: $(envName)
#                  deploymentName: $(radixJobName)


# Deploy stage - prod
#- stage: DeployProd
#  displayName: 'Deploy to prod'
#  dependsOn: 'DeployTest'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main')) 
#  variables:
#    envName: 'prod'
#    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
#    serviceConnection: '${{ variables.prodServiceConnection }}'
#    radixPromoteFromEnv: 'test'
#    radixJobName: $[ stageDependencies.DeployTest.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ] # This variable must have been set by previous step

#  jobs:
#    - deployment: Deploy
#      displayName: Migrate DB & promote
#      environment: '${{ variables.envGroupName }}'
#      pool:
#        vmImage: 'windows-latest'
#      strategy:
#        runOnce:
#          deploy:
#            steps:
              # Run Migration Script (Predeploy)
 #             - template: templates/execute-db-migration.yml
 #               parameters:
 #                 dependsOn: ''      
 #                 deploymentName: 'run_migration_script'
 #                 envGroup: '${{ variables.envGroupName }}'
 #                 serviceConnection: '${{ variables.serviceConnection }}'
 #                 kvName: '${{ variables.commonKvName }}'
 #                 kvRgName: '${{ variables.commonRgName }}'
 #                 kvSecret: '${{ variables.sqlAdminUserName }}-${{ variables.envName }}'
 #                 serverName: '${{ variables.sqlServerName }}.database.windows.net'
 #                 databaseName: '${{ variables.databaseName }}'      

              # Promote to prod
  #            - template: templates/radix-promote-env.yml
  #              parameters:
  #                fromEnvironment: $(radixPromoteFromEnv)
  #                toEnvironment: $(envName)
  #                deploymentName: $(radixJobName)



