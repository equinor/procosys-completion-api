using Dapper;

namespace Equinor.ProCoSys.Completion.DbSyncToPCS4;

/**
 * Executes the an insert of a row in the PCS 4 database, based on a sourceObject and mapping configuration
 */
public class SqlInsertStatementBuilder(IPcs4Repository oracleDBExecutor)
{
    private readonly IPcs4Repository _oracleDBExecutor = oracleDBExecutor;

    /**
     * Handle the synchronization
     */
    public async Task<(string sqlStatement, DynamicParameters sqlParameters)> BuildAsync(ISourceObjectMappingConfig sourceObjectMappingConfig, object sourceObject, string plant, CancellationToken cancellationToken = default)
    {
        var columnNamesForInsert = new List<string>();
        var parameterValuesForInsert = new List<string>();
        var sqlParameters = new DynamicParameters();

        foreach (var propertyMapping in sourceObjectMappingConfig.PropertyMappings)
        {
            if (propertyMapping.TargetSequence == null)
            {
                //Regular column
                var sourcePropertyValue = PropertyMapping.GetSourcePropertyValue(propertyMapping.SourcePropertyName, sourceObject);
                var targetColumnValue = await SqlParameterConversionHelper.ConvertSourceValueToTargetValueAsync(sourcePropertyValue, propertyMapping, plant, _oracleDBExecutor, cancellationToken);

                if (targetColumnValue != null)
                {
                    sqlParameters.Add($":{propertyMapping.TargetColumnName}", targetColumnValue);
                    columnNamesForInsert.Add(propertyMapping.TargetColumnName);
                    parameterValuesForInsert.Add($":{propertyMapping.TargetColumnName}"); //We use prepared statment (with parametrized sql statement).
                }
            }
            else
            {
                //Column value will be generated by oracle using the given sequence
                columnNamesForInsert.Add(propertyMapping.TargetColumnName);
                parameterValuesForInsert.Add($"{propertyMapping.TargetSequence}.NEXTVAL"); //We use prepared statment (with parametrized sql statement).
            }
        }

        var insertStatement = $"insert into {sourceObjectMappingConfig.TargetTable} " +
            $"( {string.Join(", ", columnNamesForInsert)} ) values " +
            $"( {string.Join(", ", parameterValuesForInsert)} )";

        return (insertStatement, sqlParameters);

    }


}
